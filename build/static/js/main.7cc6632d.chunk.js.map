{"version":3,"sources":["ico.png","components/Header.js","components/Pedido.js","components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","src","logo","alt","Pedido","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","href","Component","Menu","menu","map","i","key","type","img","precio","App","src_components_Header","components_Pedido","components_Menu","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,unGCazBC,SATA,WACP,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,kCCgBDK,cApBX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAO,CACRC,MAAO,MAHDR,wEAQV,OACIR,EAAAC,EAAAC,cAAA,WAASC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,KAAGe,KAAK,IAAId,UAAU,oBAClBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBAAwBQ,KAAKI,MAAMC,iBAbnDE,qBCgCNC,cA/Bb,SAAAA,IAAc,IAAAX,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAQ,IACZX,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAU,GAAAL,KAAAH,QACKI,MAAQ,CACXK,UAHUZ,wEAOZ,IAAMY,EAAOT,KAAKI,MAAMK,KAAKC,IAAI,SAACD,EAAME,GACtC,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWoB,IAAKD,GAC7BtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaqB,KAAK,SAASR,MAAOI,EAAKJ,MAAOO,IAAKD,GAChEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeC,IAAKgB,EAAKK,IAAKnB,IAAI,SAEjDN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAca,MAAOI,EAAKJ,OACvChB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sCAAhB,KACKiB,EAAKM,QAEV1B,EAAAC,EAAAC,cAAA,KAAGc,MAAOI,EAAKJ,OAAQI,EAAKJ,YAOtC,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYiB,WA3BhBF,aCcJS,mLATX,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC0B,EAAD,MACA5B,EAAAC,EAAAC,cAAC2B,EAAD,MACA7B,EAAAC,EAAAC,cAAC4B,EAAD,cANUZ,aCMEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7cc6632d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ico.766c3fcf.png\";","import React from 'react'\r\nimport logo from '../ico.png';\r\nimport './Header.css';\r\n\r\nconst Header = ()=> {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                <span> Burger Queen. </span>\r\n            </header>\r\n        )\r\n    \r\n}\r\nexport default Header;","import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\nclass Pedido extends Component {\r\n    constructor (){\r\n        super();\r\n        this.state ={\r\n            title: 'xx'\r\n           \r\n        };\r\n    }\r\n    render() {\r\n        return (\r\n            <section className=\"sections1\">\r\n                <div className=\"list-group\">\r\n                    <a href=\" \" className=\"list-group-item \">\r\n                        <p className=\"list-group-item-text\">{this.state.title}</p>\r\n                    </a>\r\n                   \r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\nexport default Pedido;","import React, { Component } from \"react\";\r\nimport { menu } from \"../menu.json\";\r\n\r\nclass Menu extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      menu\r\n    };\r\n  }\r\n  render() {\r\n    const menu = this.state.menu.map((menu, i) => {\r\n      return (\r\n        <div className=\"col-md-2\" key={i}>\r\n          <div className=\"card  mt-3\" type=\"button\" title={menu.title} key={i}>\r\n            <img className=\"card-img-top\" src={menu.img} alt=\"cafe\" />\r\n\r\n            <div className=\"card-footer\" title={menu.title}>\r\n              <span className=\"badge badge-pill badge-danger ml-2\">\r\n                $ {menu.precio}\r\n              </span>\r\n              <p title={menu.title}>{menu.title}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row mt-1\">{menu}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Menu;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Head from './components/Header';\nimport Pedido from './components/Pedido';\nimport Menu from './components/Menu';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Head />\n        <Pedido />\n        <Menu />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}